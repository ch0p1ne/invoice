// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using invoice.Context;

#nullable disable

namespace invoice.Migrations
{
    [DbContext(typeof(ClimaDbContext))]
    [Migration("20251020003408_AttemptingToAddNagivatePropertyInAssociativeTableFacturesExamens")]
    partial class AttemptingToAddNagivatePropertyInAssociativeTableFacturesExamens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("invoice.Models.Assurance", b =>
                {
                    b.Property<int>("AssuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssuranceId"));

                    b.Property<string>("Compagny")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CoveragePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AssuranceId");

                    b.HasIndex("Compagny")
                        .IsUnique()
                        .HasFilter("[Compagny] IS NOT NULL");

                    b.ToTable("Assurances");
                });

            modelBuilder.Entity("invoice.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<string>("ConsultationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.HasKey("ConsultationId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("invoice.Models.Examen", b =>
                {
                    b.Property<int>("ExamenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.HasKey("ExamenId");

                    b.ToTable("Examens");
                });

            modelBuilder.Entity("invoice.Models.Facture", b =>
                {
                    b.Property<int>("FactureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FactureId"));

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Css")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("InsuranceCoveragePercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal>("PatientPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmountHT")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Tva")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FactureId");

                    b.HasIndex("PatientId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("invoice.Models.FactureAvoir", b =>
                {
                    b.Property<int>("FactureAvoirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FactureAvoirId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AssuranceCoveragePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Css")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount_flat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount_percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<decimal>("PatientResponsibility")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Raison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FactureAvoirId");

                    b.HasIndex("FactureId")
                        .IsUnique();

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("FactureAvoirs");
                });

            modelBuilder.Entity("invoice.Models.FactureConsultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<int>("MedecinId")
                        .HasColumnType("int");

                    b.Property<int>("Qte")
                        .HasColumnType("int");

                    b.HasKey("ConsultationId", "FactureId");

                    b.HasIndex("FactureId");

                    b.HasIndex("MedecinId");

                    b.ToTable("FactureConsultation");
                });

            modelBuilder.Entity("invoice.Models.FactureExamen", b =>
                {
                    b.Property<int>("ExamensExamenId")
                        .HasColumnType("int");

                    b.Property<int>("FacturesFactureId")
                        .HasColumnType("int");

                    b.Property<int>("Qte")
                        .HasColumnType("int");

                    b.HasKey("ExamensExamenId", "FacturesFactureId");

                    b.HasIndex("FacturesFactureId");

                    b.ToTable("FacturesExamens");
                });

            modelBuilder.Entity("invoice.Models.GreetingMessage", b =>
                {
                    b.Property<int>("GreetingMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GreetingMessageId"));

                    b.Property<DateOnly>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GreetingMessageId");

                    b.ToTable("GreetingMessages");
                });

            modelBuilder.Entity("invoice.Models.Medecin", b =>
                {
                    b.Property<int>("MedecinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedecinId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedecinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartWork")
                        .HasColumnType("datetime2");

                    b.HasKey("MedecinId");

                    b.ToTable("Medecins");
                });

            modelBuilder.Entity("invoice.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("AssuranceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("AssuranceId");

                    b.HasIndex("AssuranceNumber")
                        .IsUnique()
                        .HasFilter("[AssuranceNumber] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("invoice.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<int>("Create_fac")
                        .HasColumnType("int");

                    b.Property<int>("Create_patient")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Manage_consul")
                        .HasColumnType("int");

                    b.Property<int>("Manage_exam")
                        .HasColumnType("int");

                    b.Property<int>("Manage_fac")
                        .HasColumnType("int");

                    b.Property<int>("Manage_med")
                        .HasColumnType("int");

                    b.Property<int>("Manage_user")
                        .HasColumnType("int");

                    b.Property<string>("Role_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId");

                    b.HasIndex("Role_name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("invoice.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Account_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone_number_one")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Account_name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("invoice.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("invoice.Models.Facture", b =>
                {
                    b.HasOne("invoice.Models.Patient", "Patient")
                        .WithMany("Factures")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("invoice.Models.User", "User")
                        .WithMany("Factures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("invoice.Models.FactureAvoir", b =>
                {
                    b.HasOne("invoice.Models.Facture", "Facture")
                        .WithOne("FactureAvoir")
                        .HasForeignKey("invoice.Models.FactureAvoir", "FactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facture");
                });

            modelBuilder.Entity("invoice.Models.FactureConsultation", b =>
                {
                    b.HasOne("invoice.Models.Consultation", null)
                        .WithMany("FacturesConsultations")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("invoice.Models.Facture", null)
                        .WithMany("FacturesConsultations")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("invoice.Models.Medecin", "Medecin")
                        .WithMany("FacturesConsultations")
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("invoice.Models.FactureExamen", b =>
                {
                    b.HasOne("invoice.Models.Examen", null)
                        .WithMany("FacturesExamens")
                        .HasForeignKey("ExamensExamenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("invoice.Models.Facture", null)
                        .WithMany("FacturseExamens")
                        .HasForeignKey("FacturesFactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("invoice.Models.Patient", b =>
                {
                    b.HasOne("invoice.Models.Assurance", "Assurance")
                        .WithMany("Patients")
                        .HasForeignKey("AssuranceId");

                    b.Navigation("Assurance");
                });

            modelBuilder.Entity("invoice.Models.UserRole", b =>
                {
                    b.HasOne("invoice.Models.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("invoice.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("invoice.Models.Assurance", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("invoice.Models.Consultation", b =>
                {
                    b.Navigation("FacturesConsultations");
                });

            modelBuilder.Entity("invoice.Models.Examen", b =>
                {
                    b.Navigation("FacturesExamens");
                });

            modelBuilder.Entity("invoice.Models.Facture", b =>
                {
                    b.Navigation("FactureAvoir");

                    b.Navigation("FacturesConsultations");

                    b.Navigation("FacturseExamens");
                });

            modelBuilder.Entity("invoice.Models.Medecin", b =>
                {
                    b.Navigation("FacturesConsultations");
                });

            modelBuilder.Entity("invoice.Models.Patient", b =>
                {
                    b.Navigation("Factures");
                });

            modelBuilder.Entity("invoice.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("invoice.Models.User", b =>
                {
                    b.Navigation("Factures");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
